def sh_script(
    name: str,
    main: str,
    deps: list = [],
    labels: list = [],
    visibility: list = [],
):
    repo_root="\\\\${REPO_ROOT}/"

    c_deps = [canonicalise(dep) for dep in deps]
    replace_cmds = []
    for c_dep in c_deps:
        # support canonical deps (//my_package:my_dep)
        replace_cmds += [f"sed -i 's#\"{c_dep}\"#\"{repo_root}$(out_location {c_dep})\"#g' $OUTS"]
        pkg_name=package_name()
        if f"//{pkg_name}" == c_dep.split(":")[0]:
            # support local package deps (:my_dep)
            a_dep=":"+c_dep.split(":")[1]
            replace_cmds += [f"sed -i 's#\"{a_dep}\"#\"{repo_root}$(out_location {c_dep})\"#g' $OUTS"]

        if basename(c_dep.split(":")[0]) == c_dep.split(":")[1]:
            # support package dep default target (//my_package)
            a_dep=c_dep.split(":")[0]
            replace_cmds += [f"sed -i 's#\"{a_dep}\"#\"{repo_root}$(out_location {c_dep})\"#g' $OUTS"]

    cmd = "cp $SRCS $OUTS\n" + "\n".join(replace_cmds)
    cmd += """
cat <<EOF | cat - $OUTS > temp
#!/usr/bin/env bash
SCRIPT_DIR="\\\$( cd "\\\$( dirname "\\\${BASH_SOURCE[0]}" )" && pwd )"
REPO_ROOT="\\\\$(echo "\\\$SCRIPT_DIR" | sed 's#/plz-out/.*##g')"
EOF
mv temp $OUTS
        """

    return genrule(
        name = name,
        srcs = [main],
        deps = deps,
        outs = [f"built_{main}"],
        cmd = cmd,
        visibility = visibility,
        binary = True,
        labels = ["sh"] + labels,
        exported_deps = deps,
    )
